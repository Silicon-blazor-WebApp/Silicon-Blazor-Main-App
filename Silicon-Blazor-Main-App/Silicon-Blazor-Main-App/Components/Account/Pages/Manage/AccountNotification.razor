@page "/Account/Manage/notifications"

<section id="notifications">
    <h1>Notifications</h1>
    <EditForm FormName="subscribe" Model="@SubscribeFrom" OnValidSubmit="@OnValidSubmit" method="post" novalidate>
        <div class="status-message">
            @if (!string.IsNullOrEmpty(StatusMessage))
            {
                <div class="alert-success">@StatusMessage</div>
            }
        </div>
        <div id="form-email" class="input-group">
            <label>Preferred email for notifications</label>
            <InputText @bind-Value="SubscribeFrom.Email" placeholder="Enter your e-mail" />
            <ValidationMessage For="@(() => SubscribeFrom.Email)" class="alert" />
        </div>
        <a href="/Account/Manage/notifications/Unsubscribe">Already subscribed? Unsubscribe here...</a>

        <div class="flexer">
            <div id="btn-switch-g">
                <label class="switch">
                    <input type="checkbox" id="switch-mode-notifications" />
                    <span class="slider round"></span>
                </label>
            </div>
            <div class="text">
                <h6>Subscribe to Newsletter</h6>
                <p>Nec, posuere non felis duis massa vitae aliquet interdum scelerisque. Neque ullamcorper.</p>
            </div>
        </div>
        <div class="flexer">
            <div id="btn-switch-g">
                <label class="switch">
                    <input type="checkbox" id="switch-mode-notifications" />
                    <span class="slider round"></span>
                </label>
            </div>
            <div class="text">
                <h6>Use Dark Mode Theme in Application</h6>
                <p>Tortor massa porttitor enim tristique neque fermentum sed.</p>
            </div>
        </div>
        <div class="flex-buttons">
            <button class="btn-gray" type="reset">Cancel</button>
            <button class="btn-theme" type="submit">Save changes</button>
        </div>

    </EditForm>
</section>

@code {
    [SupplyParameterFromQuery]
    public string StatusMessage { get; set; } = null!;
    [SupplyParameterFromForm]
    public SubscribeFormModel SubscribeFrom { get; set; } = new SubscribeFormModel();

    private async Task OnValidSubmit()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("https://newslettersubscriberprovider-silicon-blazor.azurewebsites.net/api/Subscribe?code=G8mJB80BzS53s8vaBRAo1x9yavq4XFN7FTo71Xg01jdYAzFuyZIqug%3D%3D", SubscribeFrom);
            if (result.IsSuccessStatusCode)
                StatusMessage = "Thanks for subscribing";
            else
               StatusMessage = "Unable to subscribe. Please try again later";
        }
        catch (Exception)
        {
            StatusMessage = "Unable to subscribe. Please try again later";
        }

        SubscribeFrom = new SubscribeFormModel();
        StateHasChanged();
    }

    public class SubscribeFormModel
    {
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "You must enter an email address")]
        [Display(Name = "Email Address", Prompt = "Your Email")]
        public string Email { get; set; } = null!;

        public string Message { get; set; } = null!;
    }
}
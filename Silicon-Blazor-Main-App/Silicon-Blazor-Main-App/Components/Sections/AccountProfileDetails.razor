@page "/profile"
@attribute [StreamRendering]
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Index> Logger

@if (user == null)
{
    <p>loading...</p>
}
else
{
    <div class="profile-info">
        <div class="image-cropper">
            <img src="/images/@user.ProfileImage" alt="" />
        </div>
        <EditForm Model="@uploadModel" OnValidSubmit="@HandleProfileUpload" enctype="multipart/form-data" method="post">
            <InputFile id="uploadFile" hidden @onChange="HandleFileSelected" />
            <label for="uploadFile" class="btn btn-circle"><i class="fa-regular fa-refresh"></i></label>
        </EditForm>
        <h5>@user.FirstName @user.LastName</h5>
        <p>@user.Email</p>
    </div>
}

@code {
    private ApplicationUser user = default!;
    private MultipartFormDataContent uploadModel = new MultipartFormDataContent();
    private IBrowserFile? selectedFile;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("OnInitializedAsync called");
        await LoadUserDataAsync();
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task LoadUserDataAsync()
    {
        try
        {
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                Logger.LogInformation("HttpContext is available.");
                user = await UserManager.GetUserAsync(httpContext.User) ?? null!;
                if (user != null)
                {
                    Logger.LogInformation("User loaded successfully: {FirstName} {LastName}", user.FirstName, user.LastName);
                }
                else
                {
                    Logger.LogWarning("User is null after loading.");
                }
            }
            else
            {
                Logger.LogWarning("HttpContext is null.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user data.");
        }
    }

    public async Task HandleProfileUpload()
    {
        if (selectedFile != null)
        {
            using var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 1024 * 1024 * 15));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            try
            {
                var response = await Http.PostAsync("https://fileprovider-silicon-blazor-app.azurewebsites.net", content);
                if (response.IsSuccessStatusCode)
                {
                    Logger.LogInformation("File uploaded successfully.");
                    await LoadUserDataAsync();
                    StateHasChanged();
                }
                else
                {
                    Logger.LogWarning("File upload failed with status code: {StatusCode}", response.StatusCode);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error uploading file.");
            }
        }
    }
}
